{"version":3,"sources":["webparts/teamDashboardHeader/TeamDashboardHeaderWebPart.ts"],"names":[],"mappings":"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","file":"webparts/teamDashboardHeader/TeamDashboardHeaderWebPart.js","sourcesContent":["import { Version } from '@microsoft/sp-core-library';\r\nimport { sp, Items, ItemVersion, Web } from \"@pnp/sp\";\r\n\r\nimport {\r\n  BaseClientSideWebPart,\r\n  IPropertyPaneConfiguration,\r\n  PropertyPaneTextField\r\n} from '@microsoft/sp-webpart-base';\r\nimport { escape } from '@microsoft/sp-lodash-subset';\r\n\r\nimport {\r\n  Environment,\r\n  EnvironmentType\r\n } from '@microsoft/sp-core-library';\r\n\r\n\r\nimport {\r\n  SPHttpClient,\r\n  SPHttpClientResponse   \r\n } from '@microsoft/sp-http';\r\n\r\nimport styles from './TeamDashboardHeaderWebPart.module.scss';\r\nimport * as strings from 'TeamDashboardHeaderWebPartStrings';\r\n\r\nimport MockHttpClient from './MockHttpClient';\r\n\r\nexport interface ITeamDashboardHeaderWebPartProps {\r\n  description: string;\r\n}\r\n\r\nexport interface ISPLists {\r\n  value: ISPList[];\r\n }\r\n\r\n export interface ISPList {\r\n  Title: string; // this is the department name in the List\r\n  Id: string;\r\n  DeptURL:string;\r\n }\r\n\r\nconst logo: any = require('./assests/Team.png');\r\n//global vars\r\nvar userDept = \"\";\r\n\r\nexport default class TeamDashboardHeaderWebPart extends BaseClientSideWebPart<ITeamDashboardHeaderWebPartProps> {\r\n\r\n  getuser = new Promise((resolve,reject) => {\r\n    // SharePoint PnP Rest Call to get the User Profile Properties\r\n    return sp.profiles.myProperties.get().then(function(result) {\r\n      var props = result.UserProfileProperties;\r\n      var propValue = \"\";\r\n      var userDepartment = \"\";\r\n  \r\n      props.forEach(function(prop) {\r\n        //this call returns key/value pairs so we need to look for the Dept Key\r\n        if(prop.Key == \"Department\"){\r\n          // set our global var for the users Dept.\r\n          userDept += prop.Value;\r\n        }\r\n      });\r\n      return result;\r\n    }).then((result) =>{\r\n      this._getListData().then((response) =>{\r\n        this._renderList(response.value);\r\n      });\r\n    });\r\n  });\r\n  \r\n\r\n  public render(): void {\r\n    this.domElement.innerHTML = `\r\n      <div class=\"${ styles.teamDashboardHeader }\">\r\n                <div id=\"TeamDashboardHeader\"/>\r\n      </div>`;\r\n      //this._renderListAsync();\r\n  }\r\n\r\n  protected get dataVersion(): Version {\r\n    return Version.parse('1.0');\r\n  }\r\n\r\n\r\n  private _getMockListData(): Promise<ISPLists> {\r\n    return MockHttpClient.get()\r\n      .then((data: ISPList[]) => {\r\n        var listData: ISPLists = { value: data };\r\n        return listData;\r\n      }) as Promise<ISPLists>;\r\n  }\r\n\r\n  // main REST Call to the list...passing in the deaprtment into the call to \r\n  //return a single list item\r\n  public _getListData(): Promise<ISPLists> {  \r\n    return this.context.spHttpClient.get(`https://girlscoutsrv.sharepoint.com/_api/web/lists/GetByTitle('TeamDashboardSettings')/Items?$filter=Title eq '`+ userDept +`'`, SPHttpClient.configurations.v1)\r\n      .then((response: SPHttpClientResponse) => {\r\n        return response.json();\r\n      });\r\n   }\r\n   \r\n   //mock up \r\n   private _renderListAsync(): void {\r\n    // Local environment\r\n    if (Environment.type === EnvironmentType.Local) {\r\n      this._getMockListData().then((response) => {\r\n        this._renderList(response.value);\r\n      });\r\n    }\r\n    else if (Environment.type == EnvironmentType.SharePoint || \r\n              Environment.type == EnvironmentType.ClassicSharePoint) {\r\n      this._getListData()\r\n        .then((response) => {\r\n          this._renderList(response.value);\r\n        });\r\n    }\r\n  }\r\n\r\n   // this is required to use the SharePoint PnP shorthand REST CALLS\r\n   public onInit():Promise<void> {\r\n    return super.onInit().then (_=> {\r\n      sp.setup({\r\n        spfxContext:this.context\r\n      });\r\n    });\r\n  }\r\n\r\n  private _renderList(items: ISPList[]): void {\r\n    let html: string = '';\r\n\r\n    items.forEach((item: ISPList) => {\r\n      html += `\r\n      <table style=\"width:100%;height:1px;\">\r\n        <tr>\r\n          <td style=\"height:1px;text-align:right;width:12%\">\r\n          <a href=\"${item.DeptURL} target=\"_blank\">\r\n             <img id=\"TeamImage\" class=\"${styles.headerImage}\" src=\"${logo}\" alt=\"GSVR Logo\" /></a>\r\n          </td>\r\n          <td class=\"width:70%;height:1px;vertical-align:middle;\"> \r\n          <h2 class=\"${styles.h2}\"><a id=\"teamHeaderLink\" href=\"${item.DeptURL}\" target=\"_blank\">Team Dashboard</a></h2>\r\n          </td>\r\n        </tr>\r\n      </table>   \r\n        `;\r\n    });\r\n \r\n    const listContainer: Element = this.domElement.querySelector('#TeamDashboardHeader');\r\n    listContainer.innerHTML = html;\r\n    \r\n\r\n  }\r\n\r\n\r\n  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {\r\n    return {\r\n      pages: [\r\n        {\r\n          header: {\r\n            description: strings.PropertyPaneDescription\r\n          },\r\n          groups: [\r\n            {\r\n              groupName: strings.BasicGroupName,\r\n              groupFields: [\r\n                PropertyPaneTextField('description', {\r\n                  label: strings.DescriptionFieldLabel\r\n                })\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}